@page "/addstudent"
@using Microsoft.EntityFrameworkCore
@using AttendanceSystem.Models
@using AttendanceSystem.Data
@inject AttendancedbContext DbContext

<PageTitle>Add Students</PageTitle>

<h3>Student List</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
        {
            <tr>
                <td>@student.Name</td>
                <td>@student.Email</td>
                <td>
                    <button class="btn btn-danger shadow-none" style="background-color: crimson;" @onclick="() => DeleteStudent(student.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h3>Add a New Student</h3>

<EditForm Model="newStudent" OnValidSubmit="Addstudent">
    <div class="mb-3">
        <label>Name:</label>
        <InputText class="form-control shadow-none" @bind-Value="newStudent.Name" />
    </div>
    <div class="mb-3">
        <label>Email:</label>
        <InputText class="form-control shadow-none" @bind-Value="newStudent.Email" />
    </div>
    <button type="submit" class="btn btn-primary">Add Student</button>
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3 p-2">@errorMessage</div>
    }
</EditForm>

@code {
    private List<Student> students = new();
    private Student newStudent = new Student();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            students = await DbContext.Students.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading students: {ex.Message}");
        }
    }

    private async Task Addstudent()
    {
        if (!string.IsNullOrWhiteSpace(newStudent.Name) && !string.IsNullOrWhiteSpace(newStudent.Email))
        {
            try
            {
                var existingStudent = await DbContext.Students
                    .FirstOrDefaultAsync(s => s.Name == newStudent.Name && s.Email == newStudent.Email);

                if (existingStudent != null)
                {
                    errorMessage = "Student already exists.";
                }
                else
                {
                    DbContext.Students.Add(newStudent);
                    await DbContext.SaveChangesAsync();
                    students.Add(newStudent);
                    newStudent = new Student();
                    errorMessage = null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding student: {ex.Message}");
                errorMessage = "An error occurred while adding the student.";
            }
        }
    }

    private async Task DeleteStudent(int studentId)
    {
        try
        {
            var student = await DbContext.Students.FindAsync(studentId);
            if (student != null)
            {
                DbContext.Students.Remove(student);
                await DbContext.SaveChangesAsync();
                students.Remove(student);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting student: {ex.Message}");
        }
    }
}